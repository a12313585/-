void USART2_IRQHandler(void)			 
{
		u8 com_data; 
		u8 i;
	
		static u8 RxCounter1=0;
		static u16 RxBuffer1[10]={0};
		static u8 RxState = 0;	
		static u8 RxFlag1 = 0;

		if( USART_GetITStatus(USART2,USART_IT_RXNE)!=RESET)  	   //接收中断  
		{
				USART_ClearITPendingBit(USART2,USART_IT_RXNE);   //清除中断标志
				com_data = USART_ReceiveData(USART2);
			
				if(RxState==0&&com_data==0x2C)  //0x2c帧头
				{
					RxBuffer1[RxCounter1++]=com_data;
					RxState=1;
				}
		
				else if(RxState==1&&com_data==0x12)  //0x12帧头
				{
					RxBuffer1[RxCounter1++]=com_data;
					RxState=2;
				}			
				else if(RxState==2)
				{
					RxBuffer1[RxCounter1++]=com_data;

					if(RxCounter1>=8||com_data == 0x5B)       //RxBuffer1接受满了,接收数据结束
					{
						RxState=3;
						RxFlag1=1;
						Cx=RxBuffer1[RxCounter1-3];
						Cy=RxBuffer1[RxCounter1-2];
						
					}
				}
		
				else if(RxState==3)		//检测是否接受到结束标志
				{
						if(RxBuffer1[RxCounter1-1] == 0x5B)
						{
									USART_ITConfig(USART2,USART_IT_RXNE,DISABLE);//关闭DTSABLE中断
									if(RxFlag1)
									{	
										AngFlag=0;
										if(Cx>128){Cx=Cx-256;}
										if(Cy>128){Cy=Cy-256;}
										Ang1=(float)Cx/10;Ang2=(float)Cy/20;
										AngFlag=1;
										if(Angle1>90)
										{
										Angle1-=Ang1;Angle2-=Ang2;
										}
										else if(Angle1<=90)
										{
										Angle1-=Ang1;Angle2+=Ang2;
										}
										if(Angle1<65){Angle1=65;}
										if(Angle1>140){Angle1=140;}
										if(Angle2<35){Angle2=35;}
										if(Angle2>46){Angle2=46;}
										RxFlag1 = 0;
										RxCounter1 = 0;
										RxState = 0;									
									}
									USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);									
						}
						else   //接收错误
						{
									RxState = 0;
									RxCounter1=0;
									for(i=0;i<10;i++)
									{
											RxBuffer1[i]=0x00;      //将存放数据数组清零
									}
						}
				} 
	
				else   //接收异常
				{
						RxState = 0;
						RxCounter1=0;
						for(i=0;i<10;i++)
						{
								RxBuffer1[i]=0x00;      //将存放数据数组清零							
						}
				}
			
		}
	}
